pipeline {
    agent {
        label 'agent-1-label'
    }

    environment {
        project = 'expense'
        env_name = 'dev'
        tier = 'mysql'
        component = 'mysql'
        acc_id = '343430925817'
        region = 'us-east-1'
        label = 'agent-1-label'
        appversion = ''
    }

    options {
        ansiColor('xtrem')
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }

    parameters {
        string(name: 'SNOW_CR', defaultValue: '', description: 'Please provide the snow change request')
        choice(name: 'environment', choices: ['dev', 'staging', 'qa', 'uat', 'prod'], description: 'please choose the environment')
        booleanParam(name: 'Build_Image', defaultValue: false, description: 'please check the box to build the image')
        booleanParam(name: 'Deploy', defaultValue: false, description: 'please check the box to deploy')
    }

    stages {
        stage('read the version') {
            
            steps {
                script {
                    
                    def packagejson = readJSON file: '01-mysql/CI/scripts/package.json'
                    appversion = packagejson.version
                    echo "app version is ${appversion}"
                }
            }
        }

        

        stage('Build the image') {
            when {
                expression {
                    params.Build_Image
                }
            }
            steps {
                dir('01-mysql/CI') {
                    script {
                        withAWS(region: 'us-east-1', credentials: 'aws-auth') {
                            sh """
                                aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${acc_id}.dkr.ecr.${region}.amazonaws.com

                                docker build -t ${acc_id}.dkr.ecr.${region}.amazonaws.com/${project}-${params.environment}/${component}:${appversion} .

                                docker push ${acc_id}.dkr.ecr.${region}.amazonaws.com/${project}-${params.environment}/${component}:${appversion}           
                            """
                        }
                    }
                }
            }
        }

        stage('Trigger Deploy') {
            when {
                expression {
                    params.Deploy
                }
            }
            steps {
                script {
                    build job: "${component}-CD", parameters: [string(name: 'image_version', value: "${appversion}"), string(name: 'Deploy_to', value: "${params.environment}")]
                }
            }
        }

    }

    post {
        always {
            echo "this run always "
            deleteDir()
        }
        success {
            echo "this run only when success"
        }

        failure {
            echo "this run only when failure"
        }
    }
}