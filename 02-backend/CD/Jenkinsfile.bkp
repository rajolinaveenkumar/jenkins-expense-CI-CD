pipeline {
    agent { label 'AGENT-1' }

    environment { 
        PROJECT = 'expense'
        COMPONENT = 'backend' 
        REGION = "us-east-1"
        appVersion = ''
        environment = ''
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
    }

    parameters {
        string(name: 'version',  description: 'Enter the application version')
        choice(name: 'deploy_to', choices: ['dev', 'qa', 'prod'], description: 'Select the environment to deploy')
    }

    stages {

        stage('Set Deployment Variables') {
            steps {
                script {
                    appVersion = params.version
                    environment = params.deploy_to
                }
            }
        }

        stage('Pre-Deployment Checks') {
            steps {
                script {
                    echo "Performing basic checks..."
                    sh """
                        kubectl get ns $PROJECT || kubectl create ns $PROJECT
                        helm status $COMPONENT -n $PROJECT || echo 'First time deployment...'
                    """
                }
            }
        }

        stage('Approval Before Production') {
            when {
                expression { params.deploy_to == 'prod' }
            }
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    input message: "Do you approve Production deployment?", ok: "Yes, Proceed"
                }
            }
        }

        stage('Security Scan (optional)') {
            when {
                expression { params.deploy_to != 'prod' } // can modify
            }
            steps {
                script {
                    echo "You can plug in tools like Trivy, Snyk, etc. here..."
                    sh "echo Running security scan on version $appVersion"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withAWS(region: REGION, credentials: "aws-creds-${environment}") {
                        try {
                            sh """
                                echo "Updating kubeconfig for $environment..."
                                aws eks update-kubeconfig --region $REGION --name ${PROJECT}-${environment}
                                
                                echo "Checking EKS nodes..."
                                kubectl get nodes

                                echo "Running Helm upgrade..."
                                cd helm
                                sed -i 's/IMAGE_VERSION/${appVersion}/g' values-${environment}.yaml
                                helm upgrade --install ${COMPONENT} -n ${PROJECT} -f values-${environment}.yaml .
                            """
                        } catch (err) {
                            echo "Helm deployment failed. Rolling back to previous version..."
                            sh """
                                helm rollback ${COMPONENT} -n ${PROJECT}
                                sleep 30
                            """
                            def rolloutStatus = sh(
                                script: "kubectl rollout status deployment/${COMPONENT} -n ${PROJECT} || echo FAILED",
                                returnStdout: true
                            ).trim()

                            if (rolloutStatus.contains("successfully rolled out")) {
                                echo "Rollback succeeded, but new release failed."
                                error("Deployment failed. Rollback was successful. Check the issue with new version.")
                            } else {
                                error("Rollback failed. Immediate attention needed!")
                            }
                        }
                    }
                }
            }
        }

         stage('Functional/API Tests') {
            when{
                expression { params.deploy_to == 'dev'}
            }
            
            steps {
                script{
                    
                        sh """
                            echo "functional tests will be performed after DEV deployment. Usualty these are automated selenium test cases written by testing team. If these test cases are failed pipeline also fails"
                        """
                    
                }
            }
        }

        stage('Integration Tests') {
            when{
                expression { params.deploy_to == 'qa'}
            }
            
            steps {
                script{
                    
                        sh """
                            echo "integrations tests will be performed after QA/UAT deployment. Usually these are automated BDD(Behaviour driven development) test cases in cucumber framework written by testing team. If these test cases are failed pipeline also fails"
                        """
                    
                }
            }
        }

        stage('Sanity Testing by Dev Team') {
            when {
                expression { environment == 'prod' }
            }
            steps {
                echo "Waiting for dev team to perform sanity checks manually after PROD deployment..."
                // You can also integrate with automation or wait for confirmation via input()
            }
        }

        stage('Notify Stakeholders') {
            steps {
                script {
                    echo "Sending deployment status to team..."
                    mail to: 'devops-team@example.com',
                         subject: "[$environment] Deployment - ${currentBuild.currentResult}",
                         body: """
                         Application: $COMPONENT
                         Environment: $environment
                         Version: $appVersion
                         Status: ${currentBuild.currentResult}
                         Time: ${new Date()}
                         """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir()
        }
        failure {
            echo 'Pipeline failed. Notify on-call DevOps/support.'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
    }
}
